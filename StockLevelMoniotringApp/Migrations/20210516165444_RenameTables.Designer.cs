// <auto-generated />
using System;
using FormUI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FormUI.Migrations
{
    [DbContext(typeof(SimpleWarehousContext))]
    [Migration("20210516165444_RenameTables")]
    partial class RenameTables
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "Polish_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FormUI.Models.Adresses", b =>
                {
                    b.Property<int>("IdAdres")
                        .HasColumnType("int")
                        .HasColumnName("id_adres");

                    b.Property<string>("Local")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("local");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("street");

                    b.Property<int>("StreetNumber")
                        .HasColumnType("int")
                        .HasColumnName("street_number");

                    b.Property<string>("Town")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("town");

                    b.HasKey("IdAdres");

                    b.ToTable("ADRES");
                });

            modelBuilder.Entity("FormUI.Models.Categories", b =>
                {
                    b.Property<int>("IdCategory")
                        .HasColumnType("int")
                        .HasColumnName("id_category");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("IdCategory");

                    b.ToTable("CATEGORY");
                });

            modelBuilder.Entity("FormUI.Models.Companies", b =>
                {
                    b.Property<int>("IdCompany")
                        .HasColumnType("int")
                        .HasColumnName("id_company");

                    b.Property<int>("CompanAdres")
                        .HasColumnType("int")
                        .HasColumnName("compan_adres");

                    b.Property<string>("CompanyNape")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("company_nape");

                    b.Property<string>("Nip")
                        .IsRequired()
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("nip");

                    b.HasKey("IdCompany");

                    b.HasIndex("CompanAdres");

                    b.ToTable("COMPANY");
                });

            modelBuilder.Entity("FormUI.Models.Orders", b =>
                {
                    b.Property<int>("IdOrder")
                        .HasColumnType("int")
                        .HasColumnName("id_order");

                    b.Property<int>("From")
                        .HasColumnType("int")
                        .HasColumnName("from");

                    b.Property<int>("OrderItem")
                        .HasColumnType("int")
                        .HasColumnName("order_item");

                    b.Property<int>("Purchaser")
                        .HasColumnType("int")
                        .HasColumnName("purchaser");

                    b.Property<int>("Sender")
                        .HasColumnType("int")
                        .HasColumnName("sender");

                    b.Property<int>("To")
                        .HasColumnType("int")
                        .HasColumnName("to");

                    b.HasKey("IdOrder");

                    b.HasIndex("From");

                    b.HasIndex("OrderItem");

                    b.HasIndex("Purchaser");

                    b.HasIndex("Sender");

                    b.HasIndex("To");

                    b.ToTable("ORDER");
                });

            modelBuilder.Entity("FormUI.Models.OrdersDetails", b =>
                {
                    b.Property<int>("IdOrderDetail")
                        .HasColumnType("int")
                        .HasColumnName("id_order_detail");

                    b.Property<double?>("Discount")
                        .HasColumnType("float")
                        .HasColumnName("discount");

                    b.Property<double>("Price")
                        .HasColumnType("float")
                        .HasColumnName("price");

                    b.Property<int>("Product")
                        .HasColumnType("int")
                        .HasColumnName("product");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.HasKey("IdOrderDetail");

                    b.HasIndex("Product");

                    b.ToTable("ORDER_DETAIL");
                });

            modelBuilder.Entity("FormUI.Models.Products", b =>
                {
                    b.Property<int>("IdItem")
                        .HasColumnType("int")
                        .HasColumnName("id_item");

                    b.Property<int>("Category")
                        .HasColumnType("int")
                        .HasColumnName("category");

                    b.Property<double>("Depth")
                        .HasColumnType("float")
                        .HasColumnName("depth");

                    b.Property<double>("Height")
                        .HasColumnType("float")
                        .HasColumnName("height");

                    b.Property<int?>("Location")
                        .HasColumnType("int")
                        .HasColumnName("location");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<double>("Price")
                        .HasColumnType("float")
                        .HasColumnName("price");

                    b.Property<double>("Weight")
                        .HasColumnType("float")
                        .HasColumnName("weight");

                    b.Property<double>("Width")
                        .HasColumnType("float")
                        .HasColumnName("width");

                    b.HasKey("IdItem");

                    b.HasIndex("Category");

                    b.HasIndex("Location");

                    b.ToTable("ITEMS");
                });

            modelBuilder.Entity("FormUI.Models.Users", b =>
                {
                    b.Property<int>("IdUser")
                        .HasColumnType("int")
                        .HasColumnName("id_user");

                    b.Property<string>("Email")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("email");

                    b.Property<int?>("Job")
                        .HasColumnType("int")
                        .HasColumnName("job");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("Pesel")
                        .IsRequired()
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("pesel");

                    b.Property<string>("Phone")
                        .HasMaxLength(16)
                        .IsUnicode(false)
                        .HasColumnType("varchar(16)")
                        .HasColumnName("phone");

                    b.Property<string>("Surename")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("surename");

                    b.HasKey("IdUser")
                        .HasName("PK_PEOPLE");

                    b.HasIndex("Job");

                    b.ToTable("USER");
                });

            modelBuilder.Entity("FormUI.Models.Warehouses", b =>
                {
                    b.Property<int>("IdWarehouse")
                        .HasColumnType("int")
                        .HasColumnName("id_warehouse");

                    b.Property<int>("Company")
                        .HasColumnType("int")
                        .HasColumnName("company");

                    b.Property<int>("WarehouseAdres")
                        .HasColumnType("int")
                        .HasColumnName("warehouse_adres");

                    b.Property<string>("WarehouseName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("warehouse_name");

                    b.HasKey("IdWarehouse");

                    b.HasIndex("Company");

                    b.HasIndex("WarehouseAdres");

                    b.ToTable("WAREHOUSE");
                });

            modelBuilder.Entity("FormUI.Models.Companies", b =>
                {
                    b.HasOne("FormUI.Models.Adresses", "CompanAdresNavigation")
                        .WithMany("Companies")
                        .HasForeignKey("CompanAdres")
                        .HasConstraintName("FK_COMPANY_ADRES")
                        .IsRequired();

                    b.Navigation("CompanAdresNavigation");
                });

            modelBuilder.Entity("FormUI.Models.Orders", b =>
                {
                    b.HasOne("FormUI.Models.Adresses", "FromNavigation")
                        .WithMany("OrderFromNavigations")
                        .HasForeignKey("From")
                        .HasConstraintName("FK_ORDER_ADRES")
                        .IsRequired();

                    b.HasOne("FormUI.Models.OrdersDetails", "OrderItemNavigation")
                        .WithMany("Orders")
                        .HasForeignKey("OrderItem")
                        .HasConstraintName("FK_ORDER_ORDER_DETAIL")
                        .IsRequired();

                    b.HasOne("FormUI.Models.Users", "PurchaserNavigation")
                        .WithMany("OrderPurchaserNavigations")
                        .HasForeignKey("Purchaser")
                        .HasConstraintName("FK_ORDER_PEOPLE1")
                        .IsRequired();

                    b.HasOne("FormUI.Models.Users", "SenderNavigation")
                        .WithMany("OrderSenderNavigations")
                        .HasForeignKey("Sender")
                        .HasConstraintName("FK_ORDER_PEOPLE")
                        .IsRequired();

                    b.HasOne("FormUI.Models.Adresses", "ToNavigation")
                        .WithMany("OrderToNavigations")
                        .HasForeignKey("To")
                        .HasConstraintName("FK_ORDER_ADRES1")
                        .IsRequired();

                    b.Navigation("FromNavigation");

                    b.Navigation("OrderItemNavigation");

                    b.Navigation("PurchaserNavigation");

                    b.Navigation("SenderNavigation");

                    b.Navigation("ToNavigation");
                });

            modelBuilder.Entity("FormUI.Models.OrdersDetails", b =>
                {
                    b.HasOne("FormUI.Models.Products", "ProductNavigation")
                        .WithMany("OrderDetails")
                        .HasForeignKey("Product")
                        .HasConstraintName("FK_ORDER_DETAIL_ITEMS")
                        .IsRequired();

                    b.Navigation("ProductNavigation");
                });

            modelBuilder.Entity("FormUI.Models.Products", b =>
                {
                    b.HasOne("FormUI.Models.Categories", "CategoryNavigation")
                        .WithMany("Items")
                        .HasForeignKey("Category")
                        .HasConstraintName("FK_ITEMS_CATEGORY")
                        .IsRequired();

                    b.HasOne("FormUI.Models.Warehouses", "LocationNavigation")
                        .WithMany("Items")
                        .HasForeignKey("Location")
                        .HasConstraintName("FK_ITEMS_WAREHOUSE");

                    b.Navigation("CategoryNavigation");

                    b.Navigation("LocationNavigation");
                });

            modelBuilder.Entity("FormUI.Models.Users", b =>
                {
                    b.HasOne("FormUI.Models.Companies", "JobNavigation")
                        .WithMany("Users")
                        .HasForeignKey("Job")
                        .HasConstraintName("FK_PEOPLE_COMPANY");

                    b.Navigation("JobNavigation");
                });

            modelBuilder.Entity("FormUI.Models.Warehouses", b =>
                {
                    b.HasOne("FormUI.Models.Companies", "CompanyNavigation")
                        .WithMany("Warehouses")
                        .HasForeignKey("Company")
                        .HasConstraintName("FK_WAREHOUSE_COMPANY")
                        .IsRequired();

                    b.HasOne("FormUI.Models.Adresses", "WarehouseAdresNavigation")
                        .WithMany("Warehouses")
                        .HasForeignKey("WarehouseAdres")
                        .HasConstraintName("FK_WAREHOUSE_ADRES")
                        .IsRequired();

                    b.Navigation("CompanyNavigation");

                    b.Navigation("WarehouseAdresNavigation");
                });

            modelBuilder.Entity("FormUI.Models.Adresses", b =>
                {
                    b.Navigation("Companies");

                    b.Navigation("OrderFromNavigations");

                    b.Navigation("OrderToNavigations");

                    b.Navigation("Warehouses");
                });

            modelBuilder.Entity("FormUI.Models.Categories", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("FormUI.Models.Companies", b =>
                {
                    b.Navigation("Users");

                    b.Navigation("Warehouses");
                });

            modelBuilder.Entity("FormUI.Models.OrdersDetails", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("FormUI.Models.Products", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("FormUI.Models.Users", b =>
                {
                    b.Navigation("OrderPurchaserNavigations");

                    b.Navigation("OrderSenderNavigations");
                });

            modelBuilder.Entity("FormUI.Models.Warehouses", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
